{-
tensDigit :: Integral a => a -> a
tensDigit x = d
    where xLast = x `div` 10
        d = xLast `mod` 10
    
    rewrite it using divMod (it return a tuple (,))
-}

tensDigit :: Integral a => a -> a
tensDigit x = d
      where (xLast, _) = x `divMod` 10
            (_, d) = xLast `divMod` 10

hundredsDigit :: Integral a => a -> a
hundredsDigit x = d
      where (xLast, _) = x `divMod` 100
            (_, d) = xLast `divMod` 10



{-
    Implement the function of the type a -> a -> Bool -> a 
    once each using a case expression and once with a guard.
-}

foldBool :: a -> a -> Bool -> a
foldBool x y b = case b of
                      True -> x
                      False -> y

foldBool :: a -> a -> Bool -> a
foldBool x y b
 | b = x
 | otherwise = y